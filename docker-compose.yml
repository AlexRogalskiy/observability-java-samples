---
version: '3.3'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_STACK_VERSION}
    hostname: elasticsearch
    container_name: elasticsearch
    networks: ['stack']
    ports: [ '127.0.0.1:9200:9200' ]
    volumes:
      - './data:/usr/share/elasticsearch/data'
    environment:
      - node.name=es01
      - cluster.initial_master_nodes=es01
      - cluster.name=my-meetups-cluster
      - http.host=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 5


  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_STACK_VERSION}
    hostname: kibana
    container_name: kibana
    ports: [ '127.0.0.1:5601:5601' ]
    networks: ['stack']
    depends_on: [ 'elasticsearch' ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/"]
      interval: 30s
      timeout: 10s
      retries: 5

  apm-server:
    image: docker.elastic.co/apm/apm-server:${ELASTIC_STACK_VERSION}
    hostname: apm-server
    container_name: apm-server
    networks: ['stack']
    depends_on: [ 'elasticsearch' ]
    ports: [ '127.0.0.1:8200:8200' ]

#  elastic-agent:
#    image: docker.elastic.co/beats/elastic-agent:${ELASTIC_STACK_VERSION}
#    hostname: elastic-agent
#    container_name: elastic-agent
#    restart: always
#    networks: ['stack']
#      #user: root
#    environment:
#      - FLEET_SERVER_ENABLE=true
#      - FLEET_SERVER_ELASTICSEARCH_HOST=elasticsearch:9200
#        #- FLEET_SERVER_SERVICE_TOKEN: "{service-token}"
#      - KIBANA_FLEET_SETUP=true
#      - KIBANA_FLEET_HOST=http://kibana:5601/
#    depends_on: [ 'kibana' ]

networks: {stack: {}}

volumes:
  data:
    driver: local
